def aStarAlgo(start, stop):
    open_set, closed_set = {start}, set()
    g, parents = {start: 0}, {start: start}
    
    while open_set:
        n = min(open_set, key=lambda v: g[v] + heuristic(v))
        
        if n == stop:
            path = []
            while parents[n] != n:
                path.append(n)
                n = parents[n]
            path.append(start)
            return path[::-1]
        
        open_set.remove(n)
        closed_set.add(n)
        
        for m, weight in get_neighbors(n):
            if m in closed_set:
                continue
            
            new_g = g[n] + weight
            if m not in open_set or new_g < g[m]:
                open_set.add(m)
                g[m] = new_g
                parents[m] = n
    
    return None

def get_neighbors(node):
    return Graph_nodes.get(node, [])

def heuristic(node):
    H_dist = {
        'A': 10, 'B': 8, 'C': 5, 'D': 7, 'E': 3,
        'F': 6, 'G': 5, 'H': 4, 'I': 1, 'J': 0
    }
    return H_dist.get(node, float('inf'))

Graph_nodes = {
   'A':[('B',6),('F',)],
    'B':[('C',3),('D',2)],
    'C':[('D',1),('E',5)],
    'D':[('C',1),('E',8)],
    'E':[('I',5),('J',5)],
    'F':[('G',1),('H',7)],
    'G':[('I',3)],
    'H':[('I',2)],
    'I':[('E',5),('J',3)]
}

path = aStarAlgo('A', 'J')
if path:
    print(f'Path found: {path}')
else:
    print('Path does not exist!')
